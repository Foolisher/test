/*
 * Copyright (c) 2014 杭州端点网络科技有限公司
 */
package ${package}.service;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Lists;
import io.terminus.common.model.Paging;
import io.terminus.pampas.common.Response;
import ${package}.dao.${model}Dao;
import ${package}.model.${model};
import org.joda.time.DateTime;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Matchers;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.HashMap;
import java.util.List;

import static org.mockito.Matchers.*;
import static org.mockito.Mockito.*;
<#assign ali="${model?uncap_first}"/>

/**
 * ${desc} 服务类测试<BR>
 * @author wanggen ${now?string("yyyy-MM-dd HH:mm:ss")}
 */
public class ${model}ServiceImplTest {

    @InjectMocks
    private ${model}ServiceImpl ${ali}Service;

    @Mock
    private ${model}Dao ${ali}Dao;

    @Mock
    private ${model} ${ali};

    @Before
    public void setUp() throws Exception {
        MockitoAnnotations.initMocks(this);
        ${ali} = new ${model}();
        <#list properties as p>
        <#assign t><#if "${p.javaType}"=="String">"${p.comment}-1"</#if><#if "${p.javaType}"=="Long">1l</#if><#if "${p.javaType}"=="Integer">1</#if><#if "${p.javaType}"=="Date">DateTime.now().toDate()</#if></#assign>
        ${ali}.set${p.javaName?cap_first}(${t}); //${p.comment}
        </#list>
    }

    @Test
    public void testCreate() throws Exception {

        // Should be successfully
        when(${ali}Dao.create(${ali})).thenReturn(1L);
        Response<Long> response = ${ali}Service.create(${ali});
        Assert.assertTrue("The new created id must be:[1]", response.getResult()==1);

        // Should be interrupted
        when(${ali}Dao.create(Matchers.<${model}>anyObject())).thenThrow(new RuntimeException("Interruption"));
        response = ${ali}Service.create(${ali});
        Assert.assertTrue("Should be interrupted", response.getError()!=null);

        // Should be fast failed
        response = ${ali}Service.create(null);
        Assert.assertTrue("Should be fast failed", response.getError()!=null);

    }


    @Test
    public void testFindById() throws Exception {

        // Should be successfully
        when(${ali}Dao.findById(1L)).thenReturn(${ali});
        Response<${model}> findByIdResp = ${ali}Service.findById(1L);
        Assert.assertTrue("The found object's id must be 1" ,
                          findByIdResp.getResult().getId()==1);

        // Should be interrupted
        when(${ali}Dao.findById(Matchers.<Long>anyObject())).thenThrow(new RuntimeException("Interruption"));
        findByIdResp = ${ali}Service.findById(1L);
        Assert.assertTrue("Should be interrupted", findByIdResp.getError()!=null);

        // Should be fast failed
        findByIdResp = ${ali}Service.findById(null);
        Assert.assertTrue("Should be fast failed", findByIdResp.getError()!=null);

    }


    @Test
    public void testFindByIds() throws Exception {

        // Should be successfully
        when(${ali}Dao.findByIds(Lists.newArrayList(1l)))
            .thenReturn(Lists.newArrayList(${ali}));
        Response<List<${model}>> findByIdsResp = ${ali}Service.findByIds(Lists.newArrayList(1l));
        Assert.assertTrue("The found list must by at least one record",
                findByIdsResp.getResult().size()==1 &&
                findByIdsResp.getResult().get(0).getId()==1);

        // Should be interrupted
        when(${ali}Dao.findByIds(Lists.newArrayList(Matchers.<Long>anyObject()))).thenThrow(new RuntimeException("Interruption"));
        findByIdsResp = ${ali}Service.findByIds(Lists.newArrayList(1l));
        Assert.assertTrue("Should be interrupted", findByIdsResp.getError()!=null);

        // Should be fast failed
        findByIdsResp = ${ali}Service.findByIds(Lists.<Long>newArrayList());
        Assert.assertTrue("Should be fast failed", findByIdsResp.getError()!=null);

    }


    @Test
    public void testFindByPaging() throws Exception {

        Paging<${model}> paging = new Paging<${model}>();
        paging.setTotal(1l);
        paging.setData(Lists.newArrayList(${ali}));

        // Should be successfully
        when(${ali}Dao.findByPaging(anyMap())).thenReturn(paging);
        Response<Paging<${model}>> findByPagingResp = ${ali}Service.findByPaging(
                new HashMap<String, Object>(){{
                    put("id", 1l);
                }}, 1, 1);
        Assert.assertTrue("The found records must be more than one", findByPagingResp.getResult().getData().size()>=1);

        // Should be interrupted
        when(${ali}Dao.findByPaging(anyMap())).thenThrow(new RuntimeException("Interruption"));
        findByPagingResp=${ali}Service.findByPaging(
                new HashMap<String, Object>(){{
                put("id",1l);
            }},1,1);
        Assert.assertTrue("Should be interrupted", findByPagingResp.getError()!=null);

        // Should be fast failed
        findByPagingResp=${ali}Service.findByPaging(null,1,1);
        Assert.assertTrue("Should be fast failed", findByPagingResp.getError()!=null);

    }


    <#if addQueryConds??>
    <#list addQueryConds as fds>
    <#assign mn><#list fds as fd>${fd.javaName?cap_first}<#if fd_has_next>And</#if></#list></#assign>
    <#assign params><#list fds as fd>${fd.javaName}<#if fd_has_next>, </#if></#list></#assign>
    <#assign mockParams><#list fds as fd>any<#if "${fd.javaType}"=="Integer">Int<#else>${fd.javaType}</#if>()<#if fd_has_next>, </#if></#list></#assign>
    @Test
    public void testFindBy${mn}(){

    <#list fds as fd>
    <#assign t><#if "${fd.javaType}"=="String">"${fd.comment}-1"</#if><#if "${fd.javaType}"=="Long">1l</#if><#if "${fd.javaType}"=="Integer">1</#if><#if "${fd.javaType}"=="Date">DateTime.now().toDate()</#if></#assign>
        ${fd.javaType} ${fd.javaName} = ${t}; ${"//"+fd.comment}
    </#list>

        Response<List<${model}>> resp;
        List<${model}> ${ali}s = Lists.newArrayList(${ali});

        // Should be successfully
        when(${ali}Dao.findBy${mn}(${params})).thenReturn(${ali}s);
        resp = ${ali}Service.findBy${mn}(${params});
        Assert.assertTrue("At least one record must be found", resp.getResult().size()>=1);

        // Should be interrupted
        when(${ali}Dao.findBy${mn}(${mockParams})).thenThrow(new RuntimeException("Interruption"));
        resp = ${ali}Service.findBy${mn}(${params});
        Assert.assertTrue("Should be interrupted", resp.getError()!=null);

        // Should be fast failed
        //resp = ${ali}Service.findByUserId(${mockParams});
        //Assert.assertTrue("Should be fast failed", resp.getError()!=null);

    }

    </#list>
    </#if>

    @Test
    public void testUpdate() throws Exception {

        // Should be successfully
        when(${ali}Dao.update(${ali})).thenReturn(1);
        <#list properties as p>
        <#assign t><#if "${p.javaType}"=="String">"${p.comment}-1"</#if><#if "${p.javaType}"=="Long">1l</#if><#if "${p.javaType}"=="Integer">1</#if><#if "${p.javaType}"=="Date">DateTime.now().toDate()</#if></#assign>
        ${ali}.set${p.javaName?cap_first}(${t}); //${p.comment}
        </#list>
        Response<Integer> updateResp = ${ali}Service.update(${ali});
        Assert.assertTrue("At least one record must be updated", updateResp.getResult()==1);

        // Should be interrupted
        when(${ali}Dao.update(Matchers.<${model}>anyObject())).thenThrow(new RuntimeException("Interruption"));
        updateResp = ${ali}Service.update(${ali});
        Assert.assertTrue("Should be interrupted", updateResp.getError()!=null);

        // Should be fast failed
        updateResp = ${ali}Service.update(null);
        Assert.assertTrue("Should be fast failed", updateResp.getError()!=null);

    }

    @Test
    public void testDeleteByIds() throws Exception {

        // Should be successfully
        when(${ali}Dao.deleteByIds(Lists.newArrayList(1l))).thenReturn(1);
        Response<Integer> deleteResponse = ${ali}Service.deleteByIds(Lists.newArrayList(1l));
        Assert.assertTrue("At least one record must be deleted", deleteResponse.getResult()==1);

        // Should be interrupted
        when(${ali}Dao.deleteByIds(Matchers.<List>anyObject())).thenThrow(new RuntimeException("Interruption"));
        deleteResponse = ${ali}Service.deleteByIds(Lists.newArrayList(1l));
        Assert.assertTrue("Should be interrupted", deleteResponse.getError()!=null);

        // Should be fast failed
        deleteResponse = ${ali}Service.deleteByIds(null);
        Assert.assertTrue("Should be fast failed", deleteResponse.getError()!=null);

    }
}